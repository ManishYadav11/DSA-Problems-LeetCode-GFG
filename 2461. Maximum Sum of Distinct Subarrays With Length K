// Two pointer Approach 

class Solution {
    public long maximumSubarraySum(int[] nums, int k) {

        TreeSet<Integer> set = new TreeSet<>() ;
        
        long currSum = 0 ;
        long maxSum = 0 ;

        int i = 0 ; int j = 0;

        while(j < nums.length){

            if(!set.contains(nums[j]) && set.size() < k){
                set.add(nums[j]) ;
                currSum +=nums[j] ;
                j++ ;
            }else{
                set.remove(nums[i]) ;
                currSum-=nums[i] ;
                i++ ;
            }

            if(set.size() == k){
                maxSum = Math.max(maxSum , currSum) ;
            }
        }

        return maxSum ; 
    }
}
