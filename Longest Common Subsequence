## Dynamic Problem Approach to Find Longest Common Subsquence 

## Both Tabulation and Memoization Approach

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int dp[][] = new int[text1.length() + 1][text2.length() + 1] ;

        // Initialization: set the first row and first column to 0
        for (int i = 0; i <= text1.length(); i++) {
            dp[i][0] = 0;
        }
        for (int j = 0; j <= text2.length(); j++) {
            dp[0][j] = 0;
        }
        
        return solve(text1 , text2 ,dp) ;
    }
    public int solve(String text1 , String text2  , int[][] dp){

        // Tabulation Steps

        for(int x= 1 ; x<=text1.length() ; x++){
            for(int y = 1; y<=text2.length() ; y++){

                if(text1.charAt(x -1) == text2.charAt(y -1 )){
                    dp[x][y] = 1 + dp[x -1][y-1] ;
                }
                else{
                    dp[x][y] = Math.max(dp[x-1][y] , dp[x][y-1]);
                }
            }
        }

         return dp[text1.length()][text2.length()] ;
    }


    // Memoization Process
    // public int solve(String text1 , String text2 , int i , int j , int[][] dp)

    //     if(i>=text1.length() || j >= text2.length()){
    //         return 0 ;
    //     }

    //     if(dp[i][j] != 0)
    //        return dp[i][j] ;

    //     // condtn1 : if first character of both strings matchdes
    //     if(text1.charAt(i) == text2.charAt(j)){
    //         return dp[i][j] =  1 + solve(text1 , text2 , i+1 , j+1 , dp) ;
    //     }
    //     // if first character doesnt matches 
    //     else{
    //         int len1 = solve(text1 , text2 , i , j+1 ,dp);
    //         int len2 = solve(text1 , text2 , i+1 , j , dp) ;

    //         return dp[i][j] = Math.max(len1 , len2) ;
    //     }
    // }
}
